#+TITLE: Reflect
* Preface
关于 Java 中的反射机制
** YES Java 反射机制
在 Java 中，之所以有如此多的开源技术支撑，很大的原因的 Java 的最大特征，反射机制，这个在日后项目的开发中非常的重要。 *所有的技术实现的目标只有一个：重用性。*
对于 *反射技术* ，首先考虑“正”和“反”， *所谓“正”的操作，就是使用类的时候，先导入程序所在的包，人，然后进行实例化，然后调用方法。“反”就是根据实例化对象反推出类型。*
#+begin_src java
import java.util.Date;

public class Test {
    public static void main(String[] args) {
        Date date = new Date();
        System.out.println(date.getClass());
    }
}
#+end_src
上述就是通过实例化对象获取对象所属类型（说到底就是 ~getClass()~ 方法。
*** Java 反射编程
Class 类的实例化操作，反射之中的所有核心操作都是通过 Class 类进行操作，有如下三种方式完成 Class 类的实例化，从 JDK1.5 之后加入了泛型的操作，（ *这三种方式都是需要掌握的*
#+begin_src java
public final class Class<T>
extends Object
implements Serializable, GenericDeclaration, Type, AnnotatedElement, TypeDescriptor.OfField<Class<?>>, Constable
#+end_src
**** 通过 Object 类支持
Object 类可以通过实例化对象获得 Class， ~public final Class<?> getClass()~
#+begin_src java
import java.util.Date;

public class Test {
    public static void main(String[] args) {
        Date date = new Date();
        Class<? extends Date> cls = date.getClass();
        System.out.println(cls);
        System.out.println(cls.getName());
    }
}
#+end_src

#+RESULTS:
: class java.util.Date
: java.util.Date

这个方式有个不是缺点的缺点，如果想要 Class，那么必须实例化对象。
**** JVM 原生支持
~类.class~ ：必须导入程序相应的包
#+begin_src java
import java.util.Date;

public class Test {
    public static void main(String[] args) {
        Class<? extends Date> cls2 = Date.class;
        System.out.println(cls2);
        System.out.println(cls2.getName());
    }
}

#+end_src

**** Class 类支持
在 Class 中提供一个操作的 ~static~ 方法，当初我们学 ~JDBC~ 的时候使用过， ~Class.forName(String className)~
#+begin_src java
import java.util.Date;

public class Test {
    public static void main(String[] args) {
        Class<?> cls3 = Class.forName("com.itheima.GServlet");
        System.out.println(cls3);
        System.out.println(cls3.getName());
    }
}
#+end_src
如果此时使用程序不存在，会出现 ~java.lang.ClassNotFoundException~ 。

*** Java 反射编程实例
获取 Class 类的之后
1. JDK1.9 之前，Class 类提供了一个类的实例化方法 ~newInstance()~ (Deprecated)，只能够调用无参构造方法.
2. JDK1.9 之后，Class 类提供了 ~clazz.getDeclaredConstructor().newInstance()~.
*** Java 反射与类的操作
在反射机制的处理过程之中不仅仅只是一个实例化对象的处理操作,更多的情况下还有类的组成结构操作,任何一个类的基本组成结构:父类(父接口)、包、属性、方法(构造方法、普通方法)。
**** 获取父类信息
通过 Class 类的相关操作
1. 包名称 ~public Package getPackage()~
2. 父类的定义 ~public Class<? super T> getSuperclass()~
3. 父接口的定义 ~public Class<?>[] getInterfaces()~
获取一个类的对象之后，可以获取该类的一切继承信息。
**** 调用构造方法
1. 获取所有构造方法 ~public Constructor<?>[] getDeclaredConstructors() throws SecurityException~
2. 获取参数构造方法 ~public Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException~
3. 优先使用无参构造，然后使用 setter 或者 getter 方法进行设置和获取属性。
**** 调用普通方法
